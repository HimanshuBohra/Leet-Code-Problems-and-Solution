
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
Example 1:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
Output: true
Example 2:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 13
Output: false


Solution : Binary Search

bool binarySearch(vector<vector<int>>& matrix, int target, int i, int low,int high){
    if (high >= low) { 
		int mid = low + (high - low) / 2; 
    if(matrix[i][mid]==target)
        return true;
    if(matrix[i][mid]>target)
        return binarySearch(matrix,target,i,low,mid-1);
    if(matrix[i][mid]<target)
        return binarySearch(matrix,target,i,mid+1,high);
    }
    return false;
}
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int rows = matrix.size();
        if(rows==0)
            return false;
        int cols = matrix[0].size();
        if(cols==0)
            return false;
        int pivot;
        cout<<rows<<" "<<cols;
        for(int i=0;i<rows;i++){
            if(matrix[i][cols-1]>=target){
                pivot=matrix[i][cols-1];
                cout<<pivot<<" "<<i<<" "<<cols-1<<" "<<target;
                return binarySearch(matrix,target,i,0,cols-1);
            }
        }
        return false;
    }
};
